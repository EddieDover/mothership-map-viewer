/**
 * Updates the version.js file in the site directory with current version info
 * Run this script before deploying the site to update version information
 */

import { execSync } from "child_process";
import { readFileSync, writeFileSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, "..");

try {
  // Read package.json for version
  const packageJson = JSON.parse(
    readFileSync(join(rootDir, "package.json"), "utf8")
  );
  const version = packageJson.version;

  // Get git commit hash (short)
  let commit = "unknown";
  try {
    commit = execSync("git rev-parse --short HEAD", {
      encoding: "utf8",
      cwd: rootDir,
    }).trim();
  } catch (error) {
    console.warn("Warning: Could not get git commit hash:", error.message);
  }

  // Get current date
  const buildDate = new Date().toISOString().split("T")[0];

  // Generate version.js content
  const content = `/**
 * Version information for the site
 * This file is auto-generated by scripts/update-site-version.js
 * Last updated: ${new Date().toISOString()}
 */

const VERSION_INFO = {
  version: "${version}",
  commit: "${commit}",
  buildDate: "${buildDate}",
};
`;

  // Write to site/version.js
  const versionFilePath = join(rootDir, "site", "version.js");
  writeFileSync(versionFilePath, content, "utf8");

  console.log(`  Updated site/version.js`);
  console.log(`  Version: ${version}`);
  console.log(`  Commit:  ${commit}`);
  console.log(`  Date:    ${buildDate}`);
} catch (error) {
  console.error("Error updating version:", error);
  process.exit(1);
}
